#!/bin/python3

#title           : combine.py
#description     : Combine multiple csv files generated by table-generator
#                  and produce single html file.
#author		 : Niyas C
#date            : 2016 06 23
#version         : 0.01    
#usage		 : python combine.py
#remarks         : This script was discarded, because intended functionality
#                  is already fulfilled by table-generator. table-generator 
#                  can take multiple benchexec output and form single html
#                  file

#Revision        : Integrating this script with table generate to produce exel
#                  files
#==============================================================================

import sys
from datetime import datetime
import re
import xlsxwriter

class Result:
	TRUEPOSITIVE, TRUENEGATIVE,\
			FALSEPOSITIVE, FALSENEGATIVE,\
			UNKNOWN = range(5)



class ResultRecord:

	def __init__(self, testcase, result, time, status):
		
		self.result = result
		self.time = float(time)
		
		if status == 'error':
			status = 'termination'
		elif status == 'wrong':
			status = 'incorrect'		
		if status not in ['correct', 'incorrect', 'unknown', 'termination']:
                    print(status, 'not handled yet')

		self.status = status
class EXELGenerator:
	
	def __init__(self, results, tools, filename):
		self.results = results
		self.tools = tools
		self.filename = filename

		self.workbook = xlsxwriter.Workbook(filename)
		self.worksheet = self.workbook.add_worksheet()		




	def createHeaderFormat(self):
		format = self.workbook.add_format({'bold' : True, 'align' : 'center',\
			'valign': 'vcenter', 'bg_color' : '#dddddd', 'border' : 1, \
			'text_wrap' : True})
		return format

	def createTestCaseFormat(self):
		format = self.workbook.add_format({'valign' : 'vcenter', 'text_wrap' : True,\
			'border' : 1})
		return format

	def createResultFormats(self):
		resultFormats = {}
		colors = {'correct' : 'green', 'incorrect' : 'red', 'termination' : 'pink', 'unknown' : '#CCCC00'}

		for color in colors:
			resultFormats[color] = self.workbook.add_format({'valign' : 'vcenter', 'align': 'center',
							'font_color' : colors[color], 'border' : 1})	

		return resultFormats

	def generateEXELFile(self):
		
		headerFormat = self.createHeaderFormat()
		testcaseFormat = self.createTestCaseFormat()
		resultFormats = self.createResultFormats()
		simple_center = self.workbook.add_format({'border' : 1, 'align' : 'center', 'valign' : 'vcenter'})
		# Width of test case  column
		self.worksheet.set_column(1, 1, 70)
		# Width of result columns
		self.worksheet.set_column(2, len(self.tools) + 1, 20)
		# Height of first row
		self.worksheet.set_row(0, 70)
		
		self.worksheet.write(0, 0, 'S.NO', headerFormat)
		self.worksheet.write(0, 1, 'test case'.upper(), headerFormat)
		
		
		for i in range(2, len(self.tools) + 2):
			tool = self.tools[i - 2]
			self.worksheet.write(0, i, str(tool).upper(), headerFormat)


		row_num = 1
		for testcase in self.results:
			self.worksheet.set_row(row_num, 30)
			self.worksheet.write(row_num, 0, row_num, simple_center)
			self.worksheet.write(row_num, 1, testcase, testcaseFormat)	
			for i in range(len(self.tools)):
				tool = self.tools[i]
				resultRecord = self.results[testcase][tool]
				status = resultRecord.status

				self.worksheet.write(row_num, i + 2, resultRecord.result, resultFormats[status])

			row_num += 1

		self.workbook.close()


def main(results, tools, filename):
	
	exelGenerator = EXELGenerator(results, tools, filename)
	exelGenerator.generateEXELFile()

			


